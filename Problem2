// Problem 2: Polynomial operations using pointers
#include <iostream>
#include <limits>
using namespace std;

/// Print polynomial
void Output(int degree, int *coeff){

    // looping over the dynamic array storing the coefficients in the size of the degree
    for(int i = 0; i <= degree; i++) {
        // calculating the power of x for each coefficient
        int power = degree - i;
        // storing the coefficient
        int c = coeff[i];

        // if the coefficient is zero, skip it
        if (c == 0)
            continue;

        // if the index = 0, meaning that it is the first coefficient in the polynomial
        // will not print the sign of the coefficient unless it is negative
        if (i == 0) {
            if (c > 0)
                cout << " " << c;
            else
                cout << " - " << abs(c);
        }

            // print the sign
        else {
            // if the coefficient is a positive number, then print the + sign, else the - sign
            if(c==1 && power == 0){
                cout << " + " << c;
            }
            else if (c==-1 && power == 0){
                cout << " - " << abs(c);
            }
            else if(c==1 && power >0){
                cout << " + ";
            }
            else if (c==-1 && power >0){
                cout << " - ";
            }
            else if (c > 0)
                cout << " + " << c;
            else
                cout << " - " << abs(c);
        }

        //print the power of each coefficient
        // checking if the power is >0
        if (power > 0)
            cout << "x";
        // if the power = 1, won't print the power
        if (power > 1)
            cout << "^" << power;
    }

    // printing the constant element
    cout << " = " << coeff[degree + 1] << endl;
}

/// Adding both polynomials
void add(int d1, int* coeff1, int d2, int* coeff2){
    // calculating the maximum degree of both polynomials
    int resultDegree = max(d1,d2);
    // creating a dynamic array to store the result
    int* resultCoeff = new int [resultDegree + 2];

    // Initialize the result array with zeros
    for (int i = 0; i <= resultDegree + 1; i++) {
        resultCoeff[i] = 0;
    }

    // Add the coefficients from the first polynomial
    for (int i = 0; i <= d1; i++) {
        // Calculate the corresponding position in the result array
        int resultPos = resultDegree - (d1 - i);
        resultCoeff[resultPos] += coeff1[i];
    }

    // Add the coefficients from the second polynomial
    for (int i = 0; i <= d2; i++) {
        // Calculate the corresponding position in the result array
        int resultPos = resultDegree - (d2 - i);
        resultCoeff[resultPos] += coeff2[i];
    }

    // adding the constants
    resultCoeff[resultDegree + 1] = coeff1[d1 + 1] + coeff2[d2 + 1];

    // displaying the result
    cout<< "Sum of polynomials: ";
    Output(resultDegree,resultCoeff );

    // deallocating the memory of the dynamic array
    delete[] resultCoeff;
}

/// calculating the difference of both polynomials -> subtracting first from second (second - first)
void subtract(int d1, int* coeff1, int d2, int* coeff2){
    // calculating the maximum degree of both polynomials
    int resultDegree = max(d1,d2);
    // creating a dynamic array to store the result
    int* resultCoeff = new int [resultDegree + 2];

    // Initialize result array with zeros
    for (int i = 0; i <= resultDegree + 1; i++) {
        resultCoeff[i] = 0;
    }

    // Adding the coefficients of the second polynomial to the result array
    for (int i = 0; i <= d2; i++) {
        // Calculate the corresponding position in the result array
        int resultPos = resultDegree - (d2 - i);
        resultCoeff[resultPos] += coeff2[i];
    }

    // Subtracting the coefficients of the first polynomial from the second polynomial
    for (int i = 0; i <= d1; i++) {
        // Calculate the corresponding position in the result array
        int resultPos = resultDegree - (d1 - i);
        resultCoeff[resultPos] -= coeff1[i];
    }

    // subtracting the constants
    resultCoeff[resultDegree + 1] = coeff2[d2 + 1] - coeff1[d1 + 1];

    // displaying the result
    cout<< "Difference of polynomials: ";
    Output(resultDegree,resultCoeff );

    // deallocating the memory of the dynamic array
    delete[] resultCoeff;
}

/// making the user input the coefficients and returning the pointer pointing to the dynamic array
int input(int degree,int* coeff){

    cout<< "Enter polynomial coefficients: ";
    // coefficients are input in the array from the back corresponding to the power of x
    for(int i = degree + 1; i >= 0; i--){
        cin>> coeff[i];
        while(cin.fail()){
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cerr << "Invalid input!! Please input a valid integer coefficient!! starting from coefficient " << degree - i + 1 <<" \n";
            cin>> coeff[i];
            continue;
        }
    }
    //cin >> coeff[0];


    return *coeff;
}

int main() {

    cout << "\n========================================================================\n";
    cout << "===== Welcome to the 'Polynomial operations using pointers' program ======\n";
    cout << "==========================================================================\n\n";
    int choice;

    while(true) {
        cout << "--> What would you like to do?\n"
                "  1) Perform operations on two polynomials\n"
                "  2) Exit the program\n";
        cin >> choice;

        // performing the operations on the polynomials
        if (choice == 1) {

            /// Input array 1
            int degree1;
            cout << "-> Please input the Order of the First polynomial: ";
            cin >> degree1;

            // validation check on the input degree
            while(cin.fail() || degree1 <= 0){
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cerr << "Invalid input!! Please input a valid Order for the first polynomial\n";
                cin >> degree1;
            }

            // creating a dynamic array to store the coefficients of the first polynomial
            int *coeff1 = new int[degree1 + 2];

            // inputting the coefficients of the first polynomial
            input(degree1, coeff1);

            /// Input array 2
            int degree2;
            cout << "-> Please input the Order of the Second polynomial: ";
            cin >> degree2;

            // validation check on the input degree
            while(cin.fail() || degree2 <= 0){
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cerr << "Invalid input!! Please input a valid Order for the Second polynomial\n";
                cin >> degree1;
            }

            // making a dynamic array to store the coefficients of the first polynomial
            int *coeff2 = new int[degree2 + 2];

            // inputting the coefficients of the second polynomial
            input(degree2, coeff2);

            cout << "\n--------------------------------------------------\n";
            // displaying the polynomials in a readable format
            cout << "First polynomial:";
            Output(degree1, coeff1);
            cout << "Second polynomial:";
            Output(degree2, coeff2);

            // calculating the sum of both polynomials
            add(degree1, coeff1, degree2, coeff2);
            // calculating the difference of both polynomials
            subtract(degree1, coeff1, degree2, coeff2);

            // deallocating the memory of the dynamic array of both polynomials
            delete[] coeff1;
            delete[] coeff2;
            continue;

            /// exiting the program
        } else if (choice == 2) {
            cout << "Exiting.......\n~~ Thank you for using the polynomial program ~~\n";
            break;

            /// validating the input
        }
        else {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cerr << "Invalid input!! Please input a valid choice\n";
            continue;
        }
    }
    return 0;
}
